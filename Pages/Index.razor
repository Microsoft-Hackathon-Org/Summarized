@page "/"
@using Microsoft.Identity.Web;
@using Microsoft.Graph;
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject NavigationManager NavigationManager



<h1>Meeting Recording</h1>

@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{  
    <table class="table table-striped table-condensed" style="font-family: monospace">
        <thead>
            <tr>
                <th>Team Name</th>
                <th>Description</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var team in teams)
            {
                <tr>
                    <td>@team.DisplayName</td>
                    <td>@team.Description</td>
                    <td><button class="btn btn-primary" @onclick="() => ShowTeamFolder(team.Id)">View Recordings</button></td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    User? user;
    List<Team> teams = new List<Team>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await GraphServiceClient.Me.Request().GetAsync();
            teams = await GetJoinedTeams();
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    private async Task<List<Team>> GetJoinedTeams()
    {
        List<Team> result = new List<Team>();
        var joinedTeams = await GraphServiceClient.Me.JoinedTeams.Request().GetAsync();

        foreach (var team in joinedTeams.CurrentPage)
        {
            if (!string.IsNullOrEmpty(team.DisplayName) && !string.IsNullOrEmpty(team.Description))
            {
                result.Add(team);
            }
        }

        return result;
    }

    private void ShowTeamFolder(string teamId)
    {
        NavigationManager.NavigateTo($"/teams/{teamId}");
    }
}
